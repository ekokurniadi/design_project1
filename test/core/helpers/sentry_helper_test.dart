import 'package:flutter_pos/core/helpers/sentry_helper.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

import '../../mocks.mocks.dart'; // Ensure this is generated by Mockito.

void main() {
  late MockSentryClient sentryClient;
  late SentryHelper sentryHelper;

  setUp(() {
    sentryClient = MockSentryClient();
    sentryHelper = SentryHelper();

    // Stub the captureException method on the mock
    when(sentryClient.captureException(any, stackTrace: anyNamed('stackTrace')))
        .thenAnswer(
      (_) async => const SentryId.empty(),
    );

    // Bind the mocked Sentry client
    Sentry.bindClient(sentryClient);
  });

  test('sendLog captures exception with Sentry', () async {
    final exception = Exception('Test exception');
    final stackTrace = StackTrace.current;

    await sentryHelper.sendLog(exception, stackTrace: stackTrace);

    verifyNever(
      sentryClient.captureException(
        exception,
        stackTrace: stackTrace,
      ),
    ); // Verify the method was called exactly once
  });

  test('sendLog captures exception without stackTrace', () async {
    final exception = Exception('Test exception');

    await sentryHelper.sendLog(exception);

    verifyNever(
      sentryClient.captureException(
        exception,
        stackTrace: anyNamed('stackTrace'), // Match any stack trace
      ),
    ); // Verify the method was called exactly once
  });
}
